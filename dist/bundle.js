!function(e){var t={};function i(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:s})},i.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){"use strict";i.r(t);class s{constructor(e){this.element=e}on(e,t,i=this.element){i.addEventListener(e,e=>t(e.detail))}emit(e,t,i=this.element){const s=new CustomEvent(e,{detail:t});i.dispatchEvent(s)}static bindTo(e){let t=e;if("string"==typeof e&&(t=document.querySelector(e)),!(t instanceof HTMLElement||t instanceof HTMLDocument))throw new Error("cannot bound component");new this(t).init()}init(){throw new Error("Must be implemented!")}}class n{constructor(e){this.user_id=parseFloat(e.user_id),this.group_id=parseFloat(e.group_id),this.name=e.name,this.street=e.street,this.zip_code=parseFloat(e.zip_code),this.city=e.city,this.phone=e.phone,this.credits=parseFloat(e.credits)}}class o{constructor(e){this.group_id=e.group_id,this.name=e.name,this.is_admin=e.is_admin}}var l=class extends s{init(){this.users=[],this.groups=[],this.on("actionEvent",this.actionEventFun.bind(this),document),this.on("renderInit",this.renderInitFun.bind(this),document),this.on("postRequestData",this.postBlankEmit.bind(this),document),this.on("editRequestData",this.editBlankEmit.bind(this),document),this.on("fetchPostRequest",this.postUserRequest.bind(this),document),this.on("fetchPutRequest",this.putUserRequest.bind(this),document)}renderInitFun(){this.sortData(),this.emit("renderGroups",this.groups,document),this.emit("renderUsers",this.users,document)}actionEventFun(e){const t=e.action.split(":");"updated"===t[1]&&this.fetchFun(e),"removed"===t[1]&&("user"===t[0]&&this.userDelete(e.id),"group"===t[0]&&this.groupDelete(e.id))}userDelete(e){const t=this.users.find(t=>t.user_id===e),i=this.users.indexOf(t);this.users.splice(i,1),this.emit("renderInit",null,document)}groupDelete(e){const t=this.groups.find(t=>t.group_id===e),i=this.groups.indexOf(t);this.groups.splice(i,1),this.emit("renderInit",null,document)}fetchFun(e){const t=e.action.split(":"),{id:i}=e,s=`https://ums-honeybadger.herokuapp.com/${t[0]}/${i}`;fetch(s).then(e=>{if(200!==e.status)throw new Error;return e.json()}).then(e=>{"user"===t[0]&&this.addUser(e),"group"===t[0]&&this.addGroup(e),this.emit("renderInit",null,document)}).catch(console.log)}addUser(e){const t=this.users.find(t=>t.user_id===e.user_id);if(t){const e=this.users.indexOf(t);this.users.splice(e,1)}this.users.push(new n(e)),this.countUsersInGroups()}addGroup(e){this.groups.push(new o(e)),this.countUsersInGroups()}countUsersInGroups(){this.groups.forEach(e=>{e.amountOfUsers=this.users.reduce((t,i)=>i.group_id===e.group_id?t+1:t,0)})}putUserRequest(e){const t=`https://ums-honeybadger.herokuapp.com/user/${e.user_id}`,i=new n(e);fetch(t,{method:"put",body:JSON.stringify(i)}).then(e=>{if(200!==e.status)throw new Error}).catch(console.log)}postUserRequest(e){const t=new n(e);t.user_id=void 0,fetch("https://ums-honeybadger.herokuapp.com/user",{method:"post",body:JSON.stringify(t)}).then(e=>{if(201!==e.status)throw new Error}).catch(console.log)}postBlankEmit(){this.emit("postSendData",this.groups,document)}editBlankEmit(e){const t=this.users.find(t=>t.user_id===parseFloat(e));this.emit("editSendData",[t,this.groups],document)}sortData(){this.users.sort((e,t)=>e.user_id-t.user_id),this.groups.sort((e,t)=>e.group_id-t.group_id)}};var r=class extends s{init(){this.socket=new WebSocket("ws://ums-honeybadger.herokuapp.com/ums"),this.socket.onmessage=this.onMessageFun.bind(this),this.socket.onopen=this.onOpenFun.bind(this),this.socket.onerror=this.onError.bind(this),this.socket.onclose=this.onClose.bind(this)}onMessageFun(e){const t=JSON.parse(e.data);t.message&&console.log("MESSAGE - ",t.message),t.action&&this.emit("actionEvent",t,document)}onOpenFun(e){console.log(e)}onError(e){console.log(e)}onClose(e){console.log(e)}};const a=document.querySelector(".sidenav"),d=document.querySelector("#slide-out").querySelector("ul"),c=document.querySelector(".page-title");var u=class extends s{init(){M.Sidenav.init(a,{}),this.on("renderGroups",this.renderGroups.bind(this),document),window.onhashchange=(()=>{this.emit("renderInit",null,document)})}renderGroups(e){d.innerHTML="",e.forEach(e=>{let t;parseFloat(document.location.hash.split(/[#/]/)[1])===e.group_id?(c.innerText=e.name,t="active"):t="";const i=`<li class=${t}><a href="#${e.group_id}/">${e.name} <span class="badge" data-badge-caption="">${e.amountOfUsers}</span></a></li>`;d.innerHTML+=i})}};const h=document.querySelector(".striped").querySelector("tbody");var p=class extends s{init(){this.on("renderUsers",this.renderUsers.bind(this),document)}renderUsers(e){h.innerHTML="",e.forEach(e=>{if(parseFloat(document.location.hash.split(/[#/]/)[1])===e.group_id){const t=`\n        <tr id="${e.user_id}">\n          <td>${e.name}</td>\n          <td>${e.street}</td>\n          <td>${e.zip_code}</td>\n          <td>${e.city}</td>\n          <td>${e.phone}</td>\n        </tr>\n        `;h.innerHTML+=t}})}};const m=document.querySelector("#modalAdd"),v=document.querySelector(".navigation-add").querySelector("a");var S=class extends s{init(){this.on("postSendData",this.initBlank.bind(this),document),v.addEventListener("click",this.openModalPost.bind(this),!1)}openModalPost(){this.emit("postRequestData",null,document)}initBlank(e){m.innerHTML='\n    <div class="modal-content">\n        <h4>Add new member</h4>\n        <div class="row">\n            <form class="col s12">\n                <div class="row">\n                    <div class="input-field col s6">\n                        <input id="first_name" type="text" class="validate">\n                        <label for="first_name">First Name</label>\n                    </div>\n                    <div class="input-field col s6">\n                        <input id="last_name" type="text" class="validate">\n                        <label for="last_name">Last Name</label>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="input-field col s12">\n                        <input id="street" type="text" class="validate">\n                        <label for="street">Street</label>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="input-field col s6">\n                        <input id="zip_code" type="text" class="validate">\n                        <label for="zip_code">Zip code</label>\n                    </div>\n                    <div class="input-field col s6">\n                        <input id="city" type="text" class="validate">\n                        <label for="city">City</label>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="input-field col s12">\n                        <input id="phone" type="text" class="validate">\n                        <label for="phone">Phone number</label>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="input-field col s12">\n                        <select id="groups">\n                            \n                        </select>\n                        <label>Group</label>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="input-field col s12">\n                        <label for="range_credit">Credit</label>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="input-field col s12">\n                        <input id="range_credit" type="range" min="0" max="1000" />\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n    <div class="modal-footer">\n        <a id="close_button" class="modal-action modal-close waves-effect waves-green btn-flat">Close</a>\n        <a id="create_button" class="modal-action modal-close waves-effect waves-green btn-flat">Create</a>\n    </div>\n    ',M.Modal.init(m,{}),this.instance=M.Modal.getInstance(m),this.instance.open(),this.blankGroupsSel=m.querySelector("#groups"),this.groupSel=m.querySelector("select"),this.firstNameSel=m.querySelector("#first_name"),this.lastNameSel=m.querySelector("#last_name"),this.streetSel=m.querySelector("#street"),this.zipCodeSel=m.querySelector("#zip_code"),this.citySel=m.querySelector("#city"),this.phoneSel=m.querySelector("#phone"),this.rangeCreditSel=m.querySelector("#range_credit"),this.createButtonSel=m.querySelector("#create_button"),this.modalOverlaySel=document.querySelector(".modal-overlay"),this.closeButtonSel=m.querySelector("#close_button"),this.createButtonSel.addEventListener("click",this.postBlankCreate.bind(this),!1),this.closeButtonSel.addEventListener("click",this.closeModalFun.bind(this),!1),this.modalOverlaySel.addEventListener("click",this.closeModalFun.bind(this),!1),this.createButtonSel.addEventListener("click",this.closeModalFun.bind(this),!1),this.blankGroupsSel.innerHTML="",this.blankGroupsSel.innerHTML+='<option value="" disabled selected>Choose group</option>',e.forEach(e=>{this.blankGroupsSel.innerHTML+=`<option value="${e.group_id}" id="${e.group_id}">${e.name}</option>`}),M.FormSelect.init(this.groupSel,{}),M.Range.init(this.rangeCreditSel,{})}postBlankCreate(){this.instance=M.FormSelect.init(this.groupSel,{}),this.instance=M.FormSelect.getInstance(this.groupSel);const e={};[e.group_id]=this.instance.getSelectedValues(),e.name=`${this.firstNameSel.value} ${this.lastNameSel.value}`,e.street=this.streetSel.value,e.zip_code=this.zipCodeSel.value,e.city=this.citySel.value,e.phone=this.phoneSel.value,e.credits=this.rangeCreditSel.value,this.emit("fetchPostRequest",e,document)}closeModalFun(){m.innerHTML=""}};const b=document.querySelector("#modalEdit"),f=document.querySelector("main").querySelector("tbody");var g=class extends s{init(){f.addEventListener("dblclick",this.openModalEdit.bind(this),!1),this.on("editSendData",this.initBlank.bind(this),document)}openModalEdit(e){b.innerHTML='\n    <div class="modal-content">\n        <h4>Edit member</h4>\n        <div class="row">\n            <form class="col s12">\n                <div class="row">\n                    <div class="input-field col s6">\n                        <input id="first_name" type="text" class="validate">\n                        <label for="first_name">First Name</label>\n                    </div>\n                    <div class="input-field col s6">\n                        <input id="last_name" type="text" class="validate">\n                        <label for="last_name">Last Name</label>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="input-field col s12">\n                        <input id="street" type="text" class="validate">\n                        <label for="street">Street</label>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="input-field col s6">\n                        <input id="zip_code" type="text" class="validate">\n                        <label for="zip_code">Zip code</label>\n                    </div>\n                    <div class="input-field col s6">\n                        <input id="city" type="text" class="validate">\n                        <label for="city">City</label>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="input-field col s12">\n                        <input id="phone" type="text" class="validate">\n                        <label for="phone">Phone number</label>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="input-field col s12">\n                        <select id="groups">\n\n                        </select>\n                        <label>Group</label>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="input-field col s12">\n                        <label for="range_credit">Credit</label>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="input-field col s12">\n                        <input id="range_credit" type="range" min="0" max="1000" />\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n    <div class="modal-footer">\n        <a id="close_button" class="modal-action modal-close waves-effect waves-green btn-flat">Close</a>\n        <a id="update_button" class="modal-action modal-close waves-effect waves-green btn-flat">Update</a>\n    </div>\n    ',M.Modal.init(b,{}),this.instance=M.Modal.getInstance(b),this.instance.open(),this.blankGroupsSel=b.querySelector("#groups"),this.groupSel=b.querySelector("select"),this.firstNameSel=b.querySelector("#first_name"),this.lastNameSel=b.querySelector("#last_name"),this.streetSel=b.querySelector("#street"),this.zipCodeSel=b.querySelector("#zip_code"),this.citySel=b.querySelector("#city"),this.phoneSel=b.querySelector("#phone"),this.rangeCreditSel=b.querySelector("#range_credit"),this.idContainerSel=b.querySelector(".modal-content"),this.modalOverlaySel=document.querySelector(".modal-overlay"),this.updateButtonSel=b.querySelector("#update_button"),this.closeButtonSel=b.querySelector("#close_button"),M.Range.init(this.rangeCreditSel,{}),this.emit("editRequestData",e.target.parentNode.id,document),this.updateButtonSel.addEventListener("click",this.editBlankUpdate.bind(this),!1),this.closeButtonSel.addEventListener("click",this.closeModalFun.bind(this),!1),this.updateButtonSel.addEventListener("click",this.closeModalFun.bind(this),!1),this.modalOverlaySel.addEventListener("click",this.closeModalFun.bind(this),!1)}initBlank(e){[this.user,this.groups]=e;const t=this.groups.find(e=>e.group_id===this.user.group_id);this.blankGroupsSel.innerHTML="",this.blankGroupsSel.innerHTML+=`<option value="${this.user.group_id}" disabled selected>${t.name}</option>`,this.groups.forEach(e=>{this.blankGroupsSel.innerHTML+=`<option value="${e.group_id}" id="${e.group_id}">${e.name}</option>`}),this.idContainerSel.id=this.user.user_id;const i=this.user.name.split(" ");[this.firstNameSel.value]=i,i.splice(0,1),this.lastNameSel.value=i.join(" "),this.streetSel.value=this.user.street,this.zipCodeSel.value=this.user.zip_code,this.citySel.value=this.user.city,this.phoneSel.value=this.user.phone,this.rangeCreditSel.value=this.user.credits,0===parseFloat(this.rangeCreditSel.value)&&(this.firstNameSel.disabled=!0,this.lastNameSel.disabled=!0,this.streetSel.disabled=!0,this.zipCodeSel.disabled=!0,this.citySel.disabled=!0,this.phoneSel.disabled=!0,this.rangeCreditSel.disabled=!0,this.blankGroupsSel.disabled=!0,this.updateButtonSel.setAttribute("disabled",null)),t.is_admin&&(this.rangeCreditSel.disabled=!0),M.FormSelect.init(this.groupSel,{}),M.updateTextFields()}editBlankUpdate(){this.instance=M.FormSelect.init(this.groupSel,{}),this.instance=M.FormSelect.getInstance(this.groupSel);const e={};e.user_id=this.idContainerSel.id,[e.group_id]=this.instance.getSelectedValues(),e.name=`${this.firstNameSel.value} ${this.lastNameSel.value}`,e.street=this.streetSel.value,e.zip_code=this.zipCodeSel.value,e.city=this.citySel.value,e.phone=this.phoneSel.value,e.credits=this.rangeCreditSel.value,this.emit("fetchPutRequest",e,document)}closeModalFun(){b.innerHTML=""}};l.bindTo(document),r.bindTo(document),u.bindTo(document),p.bindTo(document),S.bindTo(document),g.bindTo(document)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,