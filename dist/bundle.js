!function(e){var t={};function s(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=t,s.d=function(e,t,o){s.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},s.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";s.r(t);class o{constructor(e){this.element=e}on(e,t,s=this.element){s.addEventListener(e,e=>t(e.detail))}emit(e,t,s=this.element){const o=new CustomEvent(e,{detail:t});s.dispatchEvent(o)}static bindTo(e){let t=e;if("string"==typeof e&&(t=document.querySelector(e)),!(t instanceof HTMLElement||t instanceof HTMLDocument))throw new Error("cannot bound component");new this(t).init()}init(){throw new Error("Must be implemented!")}}class n{constructor(e){this.user_id=parseFloat(e.user_id),this.group_id=parseFloat(e.group_id),this.name=e.name,this.street=e.street,this.zip_code=parseFloat(e.zip_code),this.city=e.city,this.phone=e.phone,this.credits=parseFloat(e.credits)}}class i{constructor(e){this.group_id=e.group_id,this.name=e.name,this.is_admin=e.is_admin}}var r=class extends o{init(){this.users=[],this.groups=[],this.on("actionEvent",this.actionEventFun.bind(this),document),this.on("renderInit",this.renderInitFun.bind(this),document),this.on("postRequestData",this.postBlankEmit.bind(this),document),this.on("editRequestData",this.editBlankEmit.bind(this),document),this.on("fetchPostRequest",this.postUserRequest.bind(this),document),this.on("fetchPutRequest",this.putUserRequest.bind(this),document)}renderInitFun(){this.sortData(),console.log("users",this.users),console.log("groups",this.groups),setTimeout(function(){this.emit("renderGroups",this.groups,document),this.emit("renderUsers",this.users,document)}.bind(this),5)}actionEventFun(e){const t=e.action.split(":");"updated"===t[1]&&this.fetchFun(e),"removed"===t[1]&&("user"===t[0]&&this.userDelete(e.id),"group"===t[0]&&this.groupDelete(e.id))}userDelete(e){const t=this.users.find(t=>t.user_id===e),s=this.users.indexOf(t);this.users.splice(s,1),this.emit("renderInit",null,document)}groupDelete(e){const t=this.groups.find(t=>t.group_id===e),s=this.groups.indexOf(t);this.groups.splice(s,1),this.emit("renderInit",null,document)}fetchFun(e){console.log("data",e);const t=e.action.split(":"),s=e.id;console.log("action",t),console.log("id",s);const o=`https://ums-honeybadger.herokuapp.com/${t[0]}/${s}`;fetch(o).then(e=>{if(console.log("response",e),200!==e.status)throw new Error;return e.json()}).then(e=>{"user"===t[0]&&this.addUser(e),"group"===t[0]&&this.addGroup(e),this.emit("renderInit",null,document)}).catch(console.log)}addUser(e){const t=this.users.find(t=>t.user_id===e.user_id);if(t){const e=this.users.indexOf(t);this.users.splice(e,1)}this.users.push(new n(e)),this.countUsersInGroups()}addGroup(e){this.groups.push(new i(e)),this.countUsersInGroups()}countUsersInGroups(){this.groups.forEach(e=>{e.amountOfUsers=this.users.reduce((t,s)=>s.group_id===e.group_id?t+1:t,0)})}putUserRequest(e){const t=`https://ums-honeybadger.herokuapp.com/user/${e.user_id}`,s=new n(e);fetch(t,{method:"put",body:JSON.stringify(s)}).then(e=>{if(console.log("response",e),200!==e.status)throw new Error}).catch(console.log)}postUserRequest(e){const t=new n(e);t.user_id=void 0,fetch("https://ums-honeybadger.herokuapp.com/user",{method:"post",body:JSON.stringify(t)}).then(e=>{if(console.log("response",e),201!==e.status)throw new Error}).catch(console.log)}postBlankEmit(){this.emit("postSendData",this.groups,document)}editBlankEmit(e){const t=this.users.find(t=>t.user_id==e);this.emit("editSendData",[t,this.groups],document)}sortData(){this.users.sort((e,t)=>e.user_id-t.user_id),this.groups.sort((e,t)=>e.group_id-t.group_id)}};var d=class extends o{init(){this.socket=new WebSocket("ws://ums-honeybadger.herokuapp.com/ums"),this.socket.onmessage=this.onMessageFun.bind(this),this.socket.onopen=this.onOpenFun.bind(this),this.socket.onerror=this.onError.bind(this),this.socket.onclose=this.onClose.bind(this)}onMessageFun(e){const t=JSON.parse(e.data);console.log("WEB SOCKET - ",t),t.message&&console.log("MESSAGE - ",t.message),t.action&&this.emit("actionEvent",t,document)}onOpenFun(e){console.log(e)}onError(e){console.log(e)}onClose(e){console.log(e)}};const u=document.querySelector("#slide-out").querySelector("ul"),c=document.querySelector(".page-title");var a=class extends o{init(){this.on("renderGroups",this.renderGroups.bind(this),document),window.onhashchange=(()=>{this.emit("renderInit",null,document)})}renderGroups(e){u.innerHTML="",e.forEach(e=>{let t;document.location.hash.split(/[#/]/)[1]===e.group_id?(c.innerText=e.name,t="active"):t="";const s=`<li class=${t}><a href="#${e.group_id}/">${e.name} <span class="badge" data-badge-caption="">${e.amountOfUsers}</span></a></li>`;u.innerHTML+=s})}};const l=document.querySelector(".striped").querySelector("tbody");var h=class extends o{init(){this.on("renderUsers",this.renderUsers.bind(this),document)}renderUsers(e){l.innerHTML="",e.forEach(e=>{if(document.location.hash.split(/[#\/]/).some(t=>t==e.group_id)){let t=`\n        <tr id="${e.user_id}">\n          <td>${e.name}</td>\n          <td>${e.street}</td>\n          <td>${e.zip_code}</td>\n          <td>${e.city}</td>\n          <td>${e.phone}</td>\n        </tr>\n        `;l.innerHTML+=t}})}};const m=document.querySelector(".navigation-add").querySelector("a"),p=document.querySelector("#modalAdd").querySelector("#groups"),g=document.querySelector("#modalAdd").querySelector("select"),y=document.querySelector("#modalAdd").querySelector("#first_name"),S=document.querySelector("#modalAdd").querySelector("#last_name"),b=document.querySelector("#modalAdd").querySelector("#street"),q=document.querySelector("#modalAdd").querySelector("#zip_code"),v=document.querySelector("#modalAdd").querySelector("#city"),_=document.querySelector("#modalAdd").querySelector("#phone"),f=document.querySelector("#modalAdd").querySelector("#range_credit"),E=document.querySelector("#modalAdd").querySelector("#create_button");var k=class extends o{init(){this.on("postSendData",this.initBlank.bind(this),document),m.addEventListener("click",this.postRequestData.bind(this),!1),E.addEventListener("click",this.postBlankCreate.bind(this),!1),M.Modal.init(document.querySelector("#modalAdd"),{})}initBlank(e){y.value="",S.value="",b.value="",q.value="",v.value="",_.value="",f.value="",this.groups=e,M.updateTextFields(),p.innerHTML="",p.innerHTML+='<option value="" disabled selected>Choose group</option>',e.forEach(e=>{p.innerHTML+=`<option value="${e.group_id}" id="${e.group_id}">${e.name}</option>`}),M.FormSelect.init(g,{})}postRequestData(){this.emit("postRequestData",null,document)}postBlankCreate(){this.instance=M.FormSelect.init(g,{}),this.instance=M.FormSelect.getInstance(g);const e={};[e.group_id]=this.instance.getSelectedValues(),e.name=`${y.value} ${S.value}`,e.street=b.value,e.zip_code=q.value,e.city=v.value,e.phone=_.value,e.credits=f.value,this.emit("fetchPostRequest",e,document)}};const F=document.querySelector("#modalEdit"),$=document.querySelector("#modalEdit").querySelector("#groups"),T=document.querySelector("#modalEdit").querySelector("select"),w=document.querySelector("#modalEdit").querySelector("#first_name"),L=document.querySelector("#modalEdit").querySelector("#last_name"),x=document.querySelector("#modalEdit").querySelector("#street"),D=document.querySelector("#modalEdit").querySelector("#zip_code"),U=document.querySelector("#modalEdit").querySelector("#city"),O=document.querySelector("#modalEdit").querySelector("#phone"),R=document.querySelector("#modalEdit").querySelector("#range_credit"),B=document.querySelector("#modalEdit").querySelector(".modal-content"),I=document.querySelector("#modalEdit").querySelector("#update_button"),A=document.querySelector("main").querySelector("tbody");var H=class extends o{init(){A.addEventListener("dblclick",this.dblClickListenerFun.bind(this),!1),this.on("editSendData",this.initBlank.bind(this),document),M.Modal.init(F,{}),I.addEventListener("click",this.editBlankUpdate.bind(this),!1)}dblClickListenerFun(e){this.emit("editRequestData",e.target.parentNode.id,document)}initBlank(e){[this.user,this.groups]=e;const t=this.groups.find(e=>e.group_id===this.user.group_id);$.innerHTML="",$.innerHTML+=`<option value="${this.user.group_id}" disabled selected>${t.name}</option>`,this.groups.forEach(e=>{$.innerHTML+=`<option value="${e.group_id}" id="${e.group_id}">${e.name}</option>`}),B.id=this.user.user_id;const s=this.user.name.split(" ");[w.value]=s,s.splice(0,1),L.value=s.join(" "),x.value=this.user.street,D.value=this.user.zip_code,U.value=this.user.city,O.value=this.user.phone,R.value=this.user.credits,0===parseFloat(R.value)?(w.disabled=!0,L.disabled=!0,x.disabled=!0,D.disabled=!0,U.disabled=!0,O.disabled=!0,R.disabled=!0,$.disabled=!0):(w.disabled=!1,L.disabled=!1,x.disabled=!1,D.disabled=!1,U.disabled=!1,O.disabled=!1,R.disabled=!1,$.disabled=!1),t.is_admin&&(R.disabled=!0),M.FormSelect.init(T,{}),M.updateTextFields(),M.Modal.getInstance(F).open()}editBlankUpdate(){this.instance=M.FormSelect.init(T,{}),this.instance=M.FormSelect.getInstance(T);const e={};e.user_id=B.id,[e.group_id]=this.instance.getSelectedValues(),e.name=`${w.value} ${L.value}`,e.street=x.value,e.zip_code=D.value,e.city=U.value,e.phone=O.value,e.credits=R.value,this.emit("fetchPutRequest",e,document)}};r.bindTo(document),d.bindTo(document),a.bindTo(document),h.bindTo(document),k.bindTo(document),H.bindTo(document)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,