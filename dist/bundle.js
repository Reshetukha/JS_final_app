!function(e){var t={};function o(s){if(t[s])return t[s].exports;var i=t[s]={i:s,l:!1,exports:{}};return e[s].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=e,o.c=t,o.d=function(e,t,s){o.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:s})},o.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){"use strict";o.r(t);class s{constructor(e){this.element=e}on(e,t,o=this.element){o.addEventListener(e,e=>t(e.detail))}emit(e,t,o=this.element){const s=new CustomEvent(e,{detail:t});o.dispatchEvent(s)}static bindTo(e){let t=e;if("string"==typeof e&&(t=document.querySelector(e)),!(t instanceof HTMLElement||t instanceof HTMLDocument))throw new Error("cannot bound component");new this(t).init()}init(){throw new Error("Must be implemented!")}}class i{constructor(e){this.user_id=parseFloat(e.user_id),this.group_id=parseFloat(e.group_id),this.name=e.name,this.street=e.street,this.zip_code=parseFloat(e.zip_code),this.city=e.city,this.phone=e.phone,this.credits=parseFloat(e.credits)}}class n{constructor(e){this.group_id=e.group_id,this.name=e.name,this.is_admin=e.is_admin}}var r=class extends s{init(){this.users=[],this.groups=[],this.on("actionEvent",this.actionEventFun.bind(this),document),this.on("renderInit",this.renderInitFun.bind(this),document),this.on("postRequestData",this.postBlankEmit.bind(this),document),this.on("editRequestData",this.editBlankEmit.bind(this),document),this.on("fetchPostRequest",this.postUserRequest.bind(this),document),this.on("fetchPutRequest",this.putUserRequest.bind(this),document)}renderInitFun(){this.sortData(),setTimeout(function(){this.emit("renderGroups",this.groups,document),this.emit("renderUsers",this.users,document)}.bind(this),5)}actionEventFun(e){const t=e.action.split(":");"updated"==t[1]&&this.fetchFun(e),"removed"==t[1]&&("user"==t[0]&&this.userDelete(e.id),"group"==t[0]&&this.groupDelete(e.id))}userDelete(e){const t=this.users.find(t=>t.user_id==e),o=this.users.indexOf(t);this.users.splice(o,1),this.emit("renderInit",null,document)}groupDelete(e){const t=this.groups.find(t=>t.group_id==e),o=this.groups.indexOf(t);this.groups.splice(o,1),this.emit("renderInit",null,document)}fetchFun(e){const t=e.action.split(":"),o=e.id,s=`https://ums-honeybadger.herokuapp.com/${t[0]}/${o}`;fetch(s).then(e=>e.json()).then(e=>{"user"===t[0]&&this.addUser(e),"group"===t[0]&&this.addGroup(e),this.emit("renderInit",null,document)}).catch(console.log)}addUser(e){const t=this.users.find(t=>t.user_id==e.user_id);if(t){const e=this.users.indexOf(t);this.users.splice(e,1)}this.users.push(new i(e)),this.countUsersInGroups()}addGroup(e){this.groups.push(new n(e)),this.countUsersInGroups()}countUsersInGroups(){this.groups.forEach(e=>{e.amountOfUsers=this.users.reduce((t,o)=>o.group_id===e.group_id?t+1:t,0)})}putUserRequest(e){const t=`https://ums-honeybadger.herokuapp.com/user/${e.user_id}`,o=new i(e);fetch(t,{method:"put",body:JSON.stringify(o)})}postUserRequest(e){let t=new i(e);t.user_id=void 0,t=JSON.stringify(t),fetch("https://ums-honeybadger.herokuapp.com/user",{method:"post",body:t})}postBlankEmit(){this.emit("postSendData",this.groups,document)}editBlankEmit(e){const t=this.users.find(t=>t.user_id==e);this.emit("editSendData",[t,this.groups],document)}sortData(){this.users.sort((e,t)=>e.user_id-t.user_id),this.groups.sort((e,t)=>e.group_id-t.group_id)}};var d=class extends s{init(){this.socket=new WebSocket("ws://ums-honeybadger.herokuapp.com/ums"),this.socket.onmessage=this.onMessageFun.bind(this),this.socket.onopen=this.onOpenFun.bind(this),this.socket.onerror=this.onError.bind(this),this.socket.onclose=this.onClose.bind(this)}onMessageFun(e){const t=JSON.parse(e.data);console.log("WEB SOCKET - ",t),t.message&&console.log("MESSAGE - ",t.message),t.action&&this.emit("actionEvent",t,document)}onOpenFun(e){console.log(e)}onError(e){console.log(e)}onClose(e){console.log(e)}};const u=document.querySelector("#slide-out").querySelector("ul"),c=document.querySelector(".page-title");var a=class extends s{init(){this.on("renderGroups",this.renderGroups.bind(this),document),window.onhashchange=(()=>{this.emit("renderInit",null,document)})}renderGroups(e){u.innerHTML="",e.forEach(e=>{let t;document.location.hash.split(/[#/]/).some(t=>t==e.group_id)?(c.innerText=e.name,t="active"):t="";const o=`<li class=${t}><a href="#${e.group_id}/">${e.name} <span class="badge" data-badge-caption="">${e.amountOfUsers}</span></a></li>`;u.innerHTML+=o})}};const l=document.querySelector(".striped").querySelector("tbody");var h=class extends s{init(){this.on("renderUsers",this.renderUsers.bind(this),document)}renderUsers(e){l.innerHTML="",e.forEach(e=>{if(document.location.hash.split(/[#\/]/).some(t=>t==e.group_id)){let t=`\n        <tr id="${e.user_id}">\n          <td>${e.name}</td>\n          <td>${e.street}</td>\n          <td>${e.zip_code}</td>\n          <td>${e.city}</td>\n          <td>${e.phone}</td>\n        </tr>\n        `;l.innerHTML+=t}})}};const m=document.querySelector(".navigation-add").querySelector("a"),p=document.querySelector("#modalAdd").querySelector("#groups"),y=document.querySelector("#modalAdd").querySelector("select"),S=document.querySelector("#modalAdd").querySelector("#first_name"),g=document.querySelector("#modalAdd").querySelector("#last_name"),q=document.querySelector("#modalAdd").querySelector("#street"),b=document.querySelector("#modalAdd").querySelector("#zip_code"),f=document.querySelector("#modalAdd").querySelector("#city"),_=document.querySelector("#modalAdd").querySelector("#phone"),v=document.querySelector("#modalAdd").querySelector("#range_credit"),E=document.querySelector("#modalAdd").querySelector("#create_button");var k=class extends s{init(){this.on("postSendData",this.initBlank.bind(this),document),m.addEventListener("click",this.postRequestData.bind(this),!1),E.addEventListener("click",this.postBlankCreate.bind(this),!1),M.Modal.init(document.querySelector("#modalAdd"),{})}initBlank(e){S.value="",g.value="",q.value="",b.value="",f.value="",_.value="",v.value="",this.groups=e,M.updateTextFields(),p.innerHTML="",p.innerHTML+='<option value="" disabled selected>Choose group</option>',e.forEach(e=>{p.innerHTML+=`<option value="${e.group_id}" id="${e.group_id}">${e.name}</option>`}),M.FormSelect.init(y,{});const t=document.querySelector("#modalAdd").querySelector(".select-wrapper").querySelector("ul");Array.from(t.children).forEach(e=>{e.onclick=this.groupChoosed.bind(this)})}postRequestData(){this.emit("postRequestData",null,document)}groupChoosed(){this.instance=M.FormSelect.init(y,{}),this.instance=M.FormSelect.getInstance(y);const e=this.instance.getSelectedValues()[0];if(e){const t=this.groups.find(t=>t.group_id==e);t&&t.is_admin?v.disabled=!0:v.disabled=!1}const t=document.querySelector("#modalAdd").querySelector(".select-wrapper").querySelector("ul");Array.from(t.children).forEach(e=>{e.onclick=this.groupChoosed.bind(this)})}postBlankCreate(){this.instance=M.FormSelect.init(y,{}),this.instance=M.FormSelect.getInstance(y);const e={};[e.group_id]=this.instance.getSelectedValues(),e.name=`${S.value} ${g.value}`,e.street=q.value,e.zip_code=b.value,e.city=f.value,e.phone=_.value,e.credits=v.value,this.emit("fetchPostRequest",e,document)}};const F=document.querySelector("#modalEdit"),$=document.querySelector("#modalEdit").querySelector("#groups"),T=document.querySelector("#modalEdit").querySelector("select"),w=document.querySelector("#modalEdit").querySelector("#first_name"),L=document.querySelector("#modalEdit").querySelector("#last_name"),A=document.querySelector("#modalEdit").querySelector("#street"),x=document.querySelector("#modalEdit").querySelector("#zip_code"),D=document.querySelector("#modalEdit").querySelector("#city"),U=document.querySelector("#modalEdit").querySelector("#phone"),C=document.querySelector("#modalEdit").querySelector("#range_credit"),I=document.querySelector("#modalEdit").querySelector(".modal-content"),O=document.querySelector("#modalEdit").querySelector("#update_button"),R=document.querySelector("main").querySelector("tbody");var B=class extends s{init(){R.addEventListener("dblclick",this.dblClickListenerFun.bind(this),!1),this.on("editSendData",this.initBlank.bind(this),document),M.Modal.init(F,{}),O.addEventListener("click",this.editBlankUpdate.bind(this),!1)}dblClickListenerFun(e){this.emit("editRequestData",e.target.parentNode.id,document)}initBlank(e){const t=e[0];this.groups=e[1];const o=this.groups.find(e=>e.group_id==t.group_id);$.innerHTML="",$.innerHTML+=`<option value="${t.group_id}" disabled selected>${o.name}</option>`,this.groups.forEach(e=>{$.innerHTML+=`<option value="${e.group_id}" id="${e.group_id}">${e.name}</option>`}),o.is_admin?C.disabled=!0:C.disabled=!1,I.id=t.user_id;const s=t.name.split(" ");w.value=s[0],s.splice(0,1),L.value=s.join(" "),A.value=t.street,x.value=t.zip_code,D.value=t.city,U.value=t.phone,C.value=t.credits,0==C.value?(w.disabled=!0,L.disabled=!0,A.disabled=!0,x.disabled=!0,D.disabled=!0,U.disabled=!0,C.disabled=!0,$.disabled=!0):(w.disabled=!1,L.disabled=!1,A.disabled=!1,x.disabled=!1,D.disabled=!1,U.disabled=!1,C.disabled=!1,$.disabled=!1),o.is_admin?C.disabled=!0:C.disabled=!1,M.FormSelect.init(T,{}),M.updateTextFields(),M.Modal.getInstance(F).open();const i=document.querySelector("#modalEdit").querySelector(".select-wrapper").querySelector("ul");Array.from(i.children).forEach(e=>{e.onclick=this.groupChoosed.bind(this)})}editBlankUpdate(){this.instance=M.FormSelect.init(T,{}),this.instance=M.FormSelect.getInstance(T);const e={};e.user_id=I.id,e.group_id=this.instance.getSelectedValues()[0],e.name=`${w.value} ${L.value}`,e.street=A.value,e.zip_code=x.value,e.city=D.value,e.phone=U.value,e.credits=C.value,this.emit("fetchPutRequest",e,document)}groupChoosed(){this.instance=M.FormSelect.init(T,{}),this.instance=M.FormSelect.getInstance(T);const e=this.instance.getSelectedValues()[0];if(e){const t=this.groups.find(t=>t.group_id==e);t&&t.is_admin?C.disabled=!0:C.disabled=!1}const t=document.querySelector("#modalEdit").querySelector(".select-wrapper").querySelector("ul");Array.from(t.children).forEach(e=>{e.onclick=this.groupChoosed.bind(this)})}};r.bindTo(document),d.bindTo(document),a.bindTo(document),h.bindTo(document),k.bindTo(document),B.bindTo(document)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,